  'use client';

  import { QRCodeCanvas } from 'qrcode.react';
  import { motion } from 'framer-motion';
  import { useRef } from 'react';
  import { Download } from 'lucide-react';
  import jsPDF from 'jspdf';
  import html2canvas from 'html2canvas';

  interface QRCodeDisplayProps {
    value: string;
    downloadText: string;
  }

  export default function QRCodeDisplay({ value, downloadText }: QRCodeDisplayProps) {
    const qrRef = useRef<HTMLDivElement>(null);

    const handleDownloadPNG = () => {
      const canvas = qrRef.current?.querySelector('canvas');
      if (canvas) {
        const url = canvas.toDataURL('image/png');
        const link = document.createElement('a');
        link.href = url;
        link.download = 'qr-space-code.png';
        link.click();
      }
    };

    const handleDownloadPDF = async () => {
      if (!qrRef.current) return;

      // التقط العنصر كامل كصورة
      const canvas = await html2canvas(qrRef.current, { backgroundColor: '#ffffff' });
      const imgData = canvas.toDataURL('image/png');

      // PDF بحجم بطاقة صغيرة
      const pdfWidth = 350;
      const pdfHeight = 450;
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'pt',
        format: [pdfWidth, pdfHeight],
      });

      // خلفية بطاقة بنفسجية فاتحة
      pdf.setFillColor(230, 220, 255);
      pdf.rect(0, 0, pdfWidth, pdfHeight, 'F');

      // العنوان
      pdf.setFont('helvetica', 'bold');
      pdf.setFontSize(22);
      pdf.setTextColor(103, 58, 183);
      pdf.text('QRSPACE', pdfWidth / 2, 50, { align: 'center' });

      // صورة QR في المنتصف
      const qrSize = 250;
      const x = (pdfWidth - qrSize) / 2;
      pdf.addImage(imgData, 'PNG', x, 90, qrSize, qrSize);

      // Footer أنيق
      pdf.setFontSize(12);
      pdf.setTextColor(80, 80, 80);
      const date = new Date().toLocaleDateString();
      pdf.text(`Generated by QRSPACE • ${date}`, pdfWidth / 2, pdfHeight - 40, { align: 'center' });

      pdf.save('qr-space-card.pdf');
    };

    if (!value) return null;

    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.8, y: 50 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        transition={{ type: 'spring', stiffness: 120, damping: 15 }}
        className="w-full  flex flex-col justify-center items-center gap-8 mt-8"
      >
        {/* QR Box */}
        <div
          className="p-8 bg-white rounded-3xl border-4 border-black shadow-2xl"
          style={{ boxShadow: '0 0 50px rgba(132, 118, 255, 0.5)' }}
          ref={qrRef}
        >
          <QRCodeCanvas
            value={value}
            size={250}
            bgColor="#ffffff"
            fgColor="#0c0a18"
            level="H"
          />
        </div>

        {/* Buttons */}
        <div className="flex gap-4">
          <motion.button
            onClick={handleDownloadPNG}
            whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(192, 132, 252, 0.6)' }}
            whileTap={{ scale: 0.95 }}
            className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-violet-500 to-purple-600 text-white font-semibold rounded-full shadow-lg"
          >
            <Download size={18} />
            {downloadText} PNG
          </motion.button>

          <motion.button
            onClick={handleDownloadPDF}
            whileHover={{ scale: 1.05, boxShadow: '0 0 20px rgba(192, 132, 252, 0.6)' }}
            whileTap={{ scale: 0.95 }}
            className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-pink-500 to-rose-600 text-white font-semibold rounded-full shadow-lg"
          >
            <Download size={18} />
            {downloadText} PDF
          </motion.button>
        </div>
      </motion.div>
    );
  }
